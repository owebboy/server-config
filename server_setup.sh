#!/bin/bash
#
# Server Setup Script
# Description: Automatically configure a new Linux server with standard dotfiles
# Generated by the server-config tool

set -e

CONFIG_URL="https://config.opope.dev"
BACKUP_DIR="$HOME/.config_backup_$(date +%Y%m%d_%H%M%S)"
FORCE=0

# Process arguments
if [[ "$1" == "--force" ]]; then
    FORCE=1
fi

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'  # No Color

# Log helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Backup an existing file
backup_file() {
    local file="$1"
    if [[ -f "$file" || -d "$file" ]]; then
        mkdir -p "$BACKUP_DIR"
        cp -a "$file" "$BACKUP_DIR/"
        log_info "Backed up $file to $BACKUP_DIR/"
    fi
}

# Download a configuration file
download_config() {
    local file="$1"
    local dest="$2"
    
    # Create parent directory if it doesn't exist
    mkdir -p "$(dirname "$dest")"
    
    if command_exists curl; then
        curl -s "$CONFIG_URL/$file" -o "$dest"
    elif command_exists wget; then
        wget -q "$CONFIG_URL/$file" -O "$dest"
    else
        log_error "Neither curl nor wget is installed. Cannot download files."
        exit 1
    fi
    
    if [[ $? -ne 0 ]]; then
        log_error "Failed to download $file"
        return 1
    fi
    
    chmod 644 "$dest"
    log_success "Downloaded $file to $dest"
    return 0
}

# Setup function for bashrc
setup_bashrc() {
    local dest="$HOME/.bashrc"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "bashrc" "$dest"
}

# Setup function for vimrc
setup_vimrc() {
    local dest="$HOME/.vimrc"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "vimrc" "$dest"
}

# Setup function for tmux.conf
setup_tmux.conf() {
    local dest="$HOME/.tmux.conf"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "tmux.conf" "$dest"
}

# Setup function for gitconfig
setup_gitconfig() {
    local dest="$HOME/.gitconfig"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "gitconfig" "$dest"
    
    # Prompt for git user configuration
    read -p "Enter your Git user name: " git_name
    read -p "Enter your Git email address: " git_email
    
    # Update the placeholders in the gitconfig
    sed -i "s/CHANGEME/$git_name/g" "$dest" 2>/dev/null || sed -i '\' "s/CHANGEME/$git_name/g" "$dest"
    sed -i "s/CHANGEME@example.com/$git_email/g" "$dest" 2>/dev/null || sed -i '\' "s/CHANGEME@example.com/$git_email/g" "$dest"
}

# Setup function for screenrc
setup_screenrc() {
    local dest="$HOME/.screenrc"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "screenrc" "$dest"
}

# Setup function for inputrc
setup_inputrc() {
    local dest="$HOME/.inputrc"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "inputrc" "$dest"
}

# Setup function for ssh_config
setup_ssh_config() {
    local dest="$HOME/.ssh/config"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    mkdir -p "$HOME/.ssh"
    chmod 700 "$HOME/.ssh"
    download_config "ssh_config" "$dest"
    chmod 600 "$dest"
}

# Setup function for bash_functions
setup_bash_functions() {
    local dest="$HOME/.bash_functions"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "bash_functions" "$dest"
}

# Setup function for gitignore_global
setup_gitignore_global() {
    local dest="$HOME/.gitignore_global"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "gitignore_global" "$dest"
}

# Setup function for dircolors
setup_dircolors() {
    local dest="$HOME/.dircolors"
    if [[ -f "$dest" && $FORCE -eq 0 ]]; then
        log_warning "$dest already exists. Use --force to overwrite."
        return 1
    fi
    backup_file "$dest"
    download_config "dircolors" "$dest"
}

# Main script execution
main() {
    log_info "Starting server configuration setup..."
    
    # Check for required tools
    if ! command_exists curl && ! command_exists wget; then
        log_error "Neither curl nor wget is installed. Please install one of them first."
        exit 1
    fi
    
    # Setup configuration files
    setup_bashrc
    setup_vimrc
    setup_tmux.conf
    setup_gitconfig
    setup_screenrc
    setup_inputrc
    setup_ssh_config
    setup_bash_functions
    setup_gitignore_global
    setup_dircolors
    
    log_success "Configuration setup complete!"
    log_info "Backups of any existing files were stored in: $BACKUP_DIR"
    log_info "Log out and log back in to apply the new configurations."
}

# Run the main function
main "$@"
